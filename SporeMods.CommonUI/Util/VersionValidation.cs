using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Text;
using System.Windows;

using SporeMods.Core;
using SporeMods.Core.Injection;

namespace SporeMods.CommonUI
{
	public static class VersionValidation
	{
		static bool _isConfigValidationCompleted = false;
		public static bool IsConfigValidationCompleted
		{
			get => _isConfigValidationCompleted;
		}

		public static bool IsConfigVersionCompatible(bool isWpfApp, out Version previousVersion)
		{
			previousVersion = null;
			if (Settings.LastModManagerVersion == null)
			{
				MessageBox.Show("The current config was generated by a pre-release version of the Spore Mod Manager which is too old to be compatible with the version you're using now. Please purge it to proceed.");

				if (isWpfApp)
					Application.Current.Shutdown();
				else
					Process.GetCurrentProcess().Close();

				return false;
			}

			previousVersion = Settings.LastModManagerVersion;
			bool compatible = Settings.ModManagerVersion >= Settings.LastModManagerVersion;

			if (compatible)
				Settings.LastModManagerVersion = Settings.ModManagerVersion;
			else
			{
				if (MessageBox.Show("The current config is for a newer version of the Spore Mod Manager than the version you're using. Check for updates now?", string.Empty, MessageBoxButton.YesNo) == MessageBoxResult.Yes)
					Updater.CheckForUpdates(true);


				if (isWpfApp)
					Application.Current.Shutdown();
				else
					Process.GetCurrentProcess().Close();
			}

			_isConfigValidationCompleted = true;
			return compatible;
		}


		static void RunWithSporeMods_CoreAssembly(Action<Assembly> doThis)
		{
			AssemblyLoadContext ctx = new AssemblyLoadContext("e", true);
			var assembly = ctx.LoadFromAssemblyPath(System.IO.Path.Combine(Settings.ManagerInstallLocationPath, "SporeMods.Core.dll")); //ctx.LoadFromAssemblyPath(assemblyPath); //Assembly.Load(assemblyPath);
			doThis(assembly);
			ctx.Unload();
		}

		public const string SILENCE_PREREQ_ARG = "--silence-prereq";
		public static void WarnIfMissingOriginPrerequisites(/*string assemblyPath*//*System.Reflection.Assembly assembly*/)
		{
			if (!Environment.GetCommandLineArgs().Any(x => x.Trim(' ', '"') == SILENCE_PREREQ_ARG))
				RunWithSporeMods_CoreAssembly(assembly => WarnIfMissingOriginPrerequisites(assembly));
		}


		static (bool, bool) HasOriginPrerequisites(Assembly assembly, out long exLength, out long dlLength)
		{
			var apiFixEx = assembly.GetManifestResourceStream(ORIGIN_PREREQ_PREFIX + ORIGIN_PREREQ_EX);
			var apiFixDl = assembly.GetManifestResourceStream(ORIGIN_PREREQ_PREFIX + ORIGIN_PREREQ_DL);
			bool hasApiFixEx = apiFixEx != null;
			bool hasApiFixDl = apiFixDl != null;
			exLength = hasApiFixEx ? apiFixEx.Length : 0;
			dlLength = hasApiFixDl ? apiFixDl.Length : 0;

			return (hasApiFixEx, hasApiFixDl);
		}



		const string ORIGIN_PREREQ_PREFIX = "OriginPrereq.";
		static string ORIGIN_PREREQ_EX = "SporeApp_ModAPIFix.exe";
		static long ORIGIN_PREREQ_EX_L = 24885248;
		static string ORIGIN_PREREQ_DL = "steam_api.dll";
		public const string EXTRACT_ORIGIN_PREREQ = "--origin-first-run";

		const string STEAM_PREREQ_PREFIX = "SteamPrereq.";
		public const string EXTRACT_STEAM_PREREQ = "--steam-first-run";
		static string STEAM_PREREQ_TX = "steam_appid.txt";
		static string STEAM_PREREQ_BT = "downloadMarch2017.bat";
		static void WarnIfMissingOriginPrerequisites(Assembly assembly)
		{
			try
			{
				var (hasEx, hasDl) = HasOriginPrerequisites(assembly, out long exLength, out long dlLength);
				if (!(hasEx && hasDl))
					throw new ArgumentNullException();
				else if (exLength != ORIGIN_PREREQ_EX_L)
					throw new InvalidOperationException();
			}
			catch (Exception ex)
			{
				MessageBox.Show("You are running a build of the Spore Mod Manager which is missing Origin and Steam Spore-specific prerequisites.\n\n" +
					"As such, if you are have installed Spore from Origin or Steam, you will have to use a build which has these prerequisites (such as an official build) at least once before you will be able to use this one. (NOT LOCALIZED)\n\n\n\n" + ex.ToString(), "Warning regarding Origin Spore (NOT LOCALIZED)");
			}
		}



		public static void ExtractOriginPrerequisites()
		{
			if (!SporeLauncher.NeedsOriginPrerequisites)
				return;

			if (Permissions.IsUACEnabled && (!Permissions.IsAdministrator()))
			{
				MessageDisplay.ShowMessageBox("A few Origin-specific prerequisite files now will be extracted. This is required for the Spore Mod Manager to work with Origin Spore.\n\nDoing this requires administrator privileges, so you'll need to say 'Yes' to the prompt after this one. (NOT LOCALIZED)", string.Empty);
				try
				{
					CrossProcess.StartLauncher(EXTRACT_ORIGIN_PREREQ, true).WaitForExit();
				}
				catch (Exception ex)
				{
					MessageDisplay.ShowMessageBox("Couldn't extract Origin prerequisites (NOT LOCALIZED)" + $"\n\n{ex} ", string.Empty);
				}
			}
			else if (/*Permissions.IsAdministrator() && */Environment.GetCommandLineArgs().Any(x => x.Trim('"') == EXTRACT_ORIGIN_PREREQ))
			{
				ExtractedPrerequisitesIfNeeded();
				Process.GetCurrentProcess().Kill();
			}
		}

		public static void ExtractSteamPrerequisites()
		{
			if (!SporeLauncher.NeedsSteamPrerequisites)
				return;

			if (Permissions.IsUACEnabled && (!Permissions.IsAdministrator()))
			{
				MessageDisplay.ShowMessageBox("A few Steam-specific prerequisite files now will be extracted. This is required for the Spore Mod Manager to work with Steam Spore.\n\nDoing this requires administrator privileges, so you'll need to say 'Yes' to the prompt after this one. (NOT LOCALIZED)", string.Empty);
				try
				{
					CrossProcess.StartLauncher(EXTRACT_STEAM_PREREQ, true).WaitForExit();
				}
				catch (Exception ex)
				{
					MessageDisplay.ShowMessageBox("Couldn't extract Steam prerequisites (NOT LOCALIZED)" + $"\n\n{ex} ", string.Empty);
				}
			}
			else if (/*Permissions.IsAdministrator() && */Environment.GetCommandLineArgs().Any(x => x.Trim('"') == EXTRACT_STEAM_PREREQ))
			{
				ExtractedSteamPrerequisitesIfNeeded();
				Process.GetCurrentProcess().Kill();
			}
		}

		static void GetPrereqOutPaths(out string exOut, out string dlOut)
		{
			exOut = Path.Combine(GameInfo.SporebinEP1, ORIGIN_PREREQ_EX);
			dlOut = Path.Combine(GameInfo.SporebinEP1, ORIGIN_PREREQ_DL);
		}
		static void GetSteamPrereqOutPaths(out string btOut, out string txOut)
		{
			btOut = Path.Combine(GameInfo.SporebinEP1, STEAM_PREREQ_BT);
			txOut = Path.Combine(GameInfo.SporebinEP1, STEAM_PREREQ_TX);
		}

		public static bool NeedsPrerequisitesExtracted
		{
			get
			{
				GetPrereqOutPaths(out string exOut, out string dlOut);
				return !(File.Exists(exOut) && File.Exists(dlOut) && (new FileInfo(exOut).Length == ORIGIN_PREREQ_EX_L));
			}
		}

		static void ExtractedPrerequisitesIfNeeded()
		{
			if (NeedsPrerequisitesExtracted)
				LiterallyJustBlindlyExtractOriginPrerequisites();
		}

		static void ExtractedSteamPrerequisitesIfNeeded()
		{
			if (NeedsPrerequisitesExtracted)
				LiterallyJustBlindlyExtractSteamPrerequisites();
		}

		static void LiterallyJustBlindlyExtractOriginPrerequisites()
		{
			GetPrereqOutPaths(out string exOut, out string dlOut);
			RunWithSporeMods_CoreAssembly(assembly =>
			{
				using (var resource = assembly.GetManifestResourceStream(ORIGIN_PREREQ_PREFIX + ORIGIN_PREREQ_EX))
				{
					using (var file = new FileStream(exOut, FileMode.Create, FileAccess.Write))
						resource.CopyTo(file);
				}

				using (var resource = assembly.GetManifestResourceStream(ORIGIN_PREREQ_PREFIX + ORIGIN_PREREQ_DL))
				{
					using (var file = new FileStream(dlOut, FileMode.Create, FileAccess.Write))
						resource.CopyTo(file);
				}
			});
		}



		static void LiterallyJustBlindlyExtractSteamPrerequisites()
		{
			GetSteamPrereqOutPaths(out string btOut, out string txOut);
			RunWithSporeMods_CoreAssembly(assembly =>
			{
				using (var resource = assembly.GetManifestResourceStream(STEAM_PREREQ_PREFIX + STEAM_PREREQ_BT))
				{
					using (var file = new FileStream(btOut, FileMode.Create, FileAccess.Write))
						resource.CopyTo(file);
				}

				using (var resource = assembly.GetManifestResourceStream(STEAM_PREREQ_PREFIX + STEAM_PREREQ_TX))
				{
					using (var file = new FileStream(txOut, FileMode.Create, FileAccess.Write))
						resource.CopyTo(file);
				}
			});

			RunDownloadMarch2017(btOut);
		}

		static void RunDownloadMarch2017(string btOut)
        {
			if (Environment.OSVersion.Platform != PlatformID.Win32NT)
            {
				MessageDisplay.ShowMessageBox("March2017 download script is not yet implemented for Unix and Unix-like systems.\nYou will not be able to download yet. (NOT LOCALIZED)", "Error Downloading March2017 Executable (Not Localized)");
				return;
            }

			ProcessStartInfo cmdInfo;
			Process cmdProcess;

			cmdInfo = new ProcessStartInfo("cmd.exe", "/c \"" + btOut + "\"");
			cmdInfo.CreateNoWindow = false;
			cmdInfo.UseShellExecute = true;

			cmdInfo.RedirectStandardOutput = false;
			cmdInfo.RedirectStandardError = false;
			cmdInfo.WindowStyle = ProcessWindowStyle.Normal;

			cmdProcess = Process.Start(cmdInfo);
			cmdProcess.WaitForExit();

			//string error = cmdProcess.StandardError.ReadToEnd();


			if (!File.Exists(Path.Combine(GameInfo.SporebinEP1, ORIGIN_PREREQ_EX)))
            {
				MessageDisplay.ShowMessageBox("An error was occurred when downloading or copying the March2017 executable from Steam.\nYou may be unable to play the game modded. (NOT LOCALIZED)", "Error Downloading March2017 Executable (Not Localized)");
			}
            else
            {
				MessageDisplay.ShowMessageBox("Successfully downloaded the March2017 executable. The game will now launch. (NOT LOCALIZED)", "Success");
            }

        }
	}
}
